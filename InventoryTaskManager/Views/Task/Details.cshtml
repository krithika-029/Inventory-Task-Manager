@model InventoryTaskManager.Models.TaskItem

@{
    ViewData["Title"] = "Task Details";
}

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Task Details</h2>
                <div>
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                        <i class="fas fa-edit"></i> Edit
                    </a>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Tasks
                    </a>
                </div>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                @Model.Title
                                <span class="badge @Model.StatusClass ms-2">@Model.Status.ToString().Replace("InProgress", "In Progress")</span>
                                @if (Model.IsOverdue)
                                {
                                    <span class="badge bg-danger ms-1">Overdue</span>
                                }
                                else if (Model.IsDueSoon)
                                {
                                    <span class="badge bg-warning ms-1">Due Soon</span>
                                }
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-sm-3">
                                    <strong>Description:</strong>
                                </div>
                                <div class="col-sm-9">
                                    @if (!string.IsNullOrEmpty(Model.Description))
                                    {
                                        <p>@Model.Description</p>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No description provided</span>
                                    }
                                </div>
                            </div>
                            <hr>
                            
                            <div class="row">
                                <div class="col-sm-3">
                                    <strong>Priority:</strong>
                                </div>
                                <div class="col-sm-9">
                                    <span class="badge @Model.PriorityClass fs-6">@Model.Priority</span>
                                </div>
                            </div>
                            <hr>

                            <div class="row">
                                <div class="col-sm-3">
                                    <strong>Due Date:</strong>
                                </div>
                                <div class="col-sm-9">
                                    <span class="@(Model.IsOverdue ? "text-danger fw-bold" : Model.IsDueSoon ? "text-warning fw-bold" : "")">
                                        @Model.DueDate.ToString("dddd, MMMM dd, yyyy")
                                    </span>
                                    @if (Model.IsOverdue)
                                    {
                                        <br><small class="text-danger">Overdue by @Math.Abs(Model.DaysUntilDue) day(s)</small>
                                    }
                                    else if (Model.IsDueSoon)
                                    {
                                        <br><small class="text-warning">Due in @Model.DaysUntilDue day(s)</small>
                                    }
                                    else
                                    {
                                        <br><small class="text-muted">@Model.DaysUntilDue day(s) remaining</small>
                                    }
                                </div>
                            </div>
                            <hr>

                            <div class="row">
                                <div class="col-sm-3">
                                    <strong>Assigned To:</strong>
                                </div>
                                <div class="col-sm-9">
                                    @if (!string.IsNullOrEmpty(Model.AssignedTo))
                                    {
                                        <span class="badge bg-secondary fs-6">@Model.AssignedTo</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unassigned</span>
                                    }
                                </div>
                            </div>
                            <hr>

                            <div class="row">
                                <div class="col-sm-3">
                                    <strong>Status:</strong>
                                </div>
                                <div class="col-sm-9">
                                    <span class="badge @Model.StatusClass fs-6">@Model.Status.ToString().Replace("InProgress", "In Progress")</span>
@if (Model.Status == InventoryTaskManager.Models.TaskStatus.Completed && Model.CompletedDate.HasValue)
                                    {
                                        <br><small class="text-success">Completed on @Model.CompletedDate.Value.ToString("MMM dd, yyyy")</small>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">Task Progress</h6>
                        </div>
                        <div class="card-body">
                            <div class="text-center mb-3">
@if (Model.Status == InventoryTaskManager.Models.TaskStatus.Completed)
                                {
                                    <div class="alert alert-success" role="alert">
                                        <i class="fas fa-check-circle"></i>
                                        <strong>Task Completed!</strong>
                                        @if (Model.CompletedDate.HasValue)
                                        {
                                            <br><small>Completed on @Model.CompletedDate.Value.ToString("MMM dd, yyyy")</small>
                                        }
                                    </div>
                                }
                                else if (Model.IsOverdue)
                                {
                                    <div class="alert alert-danger" role="alert">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <strong>Task Overdue!</strong><br>
                                        Due date was @Model.DueDate.ToString("MMM dd, yyyy")
                                    </div>
                                }
                                else if (Model.IsDueSoon)
                                {
                                    <div class="alert alert-warning" role="alert">
                                        <i class="fas fa-clock"></i>
                                        <strong>Due Soon!</strong><br>
                                        Due in @Model.DaysUntilDue day(s)
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-info" role="alert">
                                        <i class="fas fa-info-circle"></i>
                                        <strong>Task Active</strong><br>
                                        @Model.DaysUntilDue day(s) remaining
                                    </div>
                                }
                            </div>

                            <div class="mb-3">
                                <small class="text-muted">Progress Status</small>
                                <div class="progress">
                                    @{
                                        var progressPercentage = Model.Status switch
                                        {
InventoryTaskManager.Models.TaskStatus.Pending => 0,
InventoryTaskManager.Models.TaskStatus.InProgress => 50,
InventoryTaskManager.Models.TaskStatus.Completed => 100,
                                            _ => 0
                                        };
                                        var progressClass = Model.Status switch
                                        {
InventoryTaskManager.Models.TaskStatus.Pending => "bg-warning",
InventoryTaskManager.Models.TaskStatus.InProgress => "bg-info",
InventoryTaskManager.Models.TaskStatus.Completed => "bg-success",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <div class="progress-bar @progressClass" role="progressbar" 
                                         style="width: @progressPercentage%" 
                                         aria-valuenow="@progressPercentage" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @progressPercentage%
                                    </div>
                                </div>
                            </div>

                            <div class="row text-center">
                                <div class="col-6">
                                    <div class="border-end">
                                        <div class="fs-4 @(Model.Priority == TaskPriority.Critical ? "text-danger" : Model.Priority == TaskPriority.High ? "text-warning" : "text-info")">
                                            @Model.Priority
                                        </div>
                                        <small class="text-muted">Priority</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="fs-4 @(Model.IsOverdue ? "text-danger" : Model.IsDueSoon ? "text-warning" : "text-success")">
                                        @Math.Abs(Model.DaysUntilDue)
                                    </div>
                                    <small class="text-muted">Days @(Model.IsOverdue ? "Overdue" : "Until Due")</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="card-title mb-0">Record Information</h6>
                        </div>
                        <div class="card-body">
                            <div class="row mb-2">
                                <div class="col-sm-5">
                                    <small class="text-muted">Created:</small>
                                </div>
                                <div class="col-sm-7">
                                    <small>@Model.CreatedDate.ToString("MMM dd, yyyy")</small>
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-5">
                                    <small class="text-muted">Last Updated:</small>
                                </div>
                                <div class="col-sm-7">
                                    <small>@Model.UpdatedDate.ToString("MMM dd, yyyy")</small>
                                </div>
                            </div>
                            @if (Model.CompletedDate.HasValue)
                            {
                                <div class="row">
                                    <div class="col-sm-5">
                                        <small class="text-muted">Completed:</small>
                                    </div>
                                    <div class="col-sm-7">
                                        <small class="text-success">@Model.CompletedDate.Value.ToString("MMM dd, yyyy")</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="card-title mb-0">Quick Actions</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                    <i class="fas fa-edit"></i> Edit Task
                                </a>
@if (Model.Status != InventoryTaskManager.Models.TaskStatus.Completed)
                                {
                                    <form asp-action="MarkComplete" asp-route-id="@Model.Id" method="post">
                                        <button type="submit" class="btn btn-outline-success w-100">
                                            <i class="fas fa-check"></i> Mark Complete
                                        </button>
                                    </form>
                                }
                                <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-outline-danger">
                                    <i class="fas fa-trash"></i> Delete Task
                                </a>
                                <a asp-action="Index" class="btn btn-outline-secondary">
                                    <i class="fas fa-list"></i> View All Tasks
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Confirm mark complete action
        $('form[asp-action="MarkComplete"]').on('submit', function(e) {
            if (!confirm('Mark this task as completed?')) {
                e.preventDefault();
            }
        });
    </script>
}
